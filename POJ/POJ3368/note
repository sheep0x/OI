Copyright 2014 陈睿超<linuxer.sheep.0x@gmail.com>
本作品采用知识共享 署名-相同方式共享 4.0 国际 许可协议进行许可。访问 http://creativecommons.org/licenses/by-sa/4.0/deed.zh 查看该许可协议。

==================== 题意 ====================
给出一个长为N的单调不降数列a。有Q个询问，对每个询问，回答a[L..R]中的众数的出现次数（当然，a[L..R]中可能有多个众数）。
有多组数据。

==================== 解 ====================
---------- RMQ ----------
将a按值划分成若干段。例如a = [1,1,1,2,2,3,3,3]，则划分成[1,1,1]、[2,2]、[3,3,3]。
对于询问<L,R>，二分求出L右侧的第一个“段的左端点”、R左侧的第一个“段的右端点”，分别记为x、y。a[x..y]中的数都是整段整段的，众数的出现次数可以用RMQ求。a[L..x-1]中的数应该属于同一段，这段中的数字的出现次数即为x-L。a[y+1..R]同理。
总复杂度: O(NlogN + QlogN)
有那么一点点分块的感觉？

---------- RMQ+预处理 ----------
实际上求出x和y的步骤可以不用二分查找。注意到L和R的取值范围都是1~N，且序列a是固定不变的，因此直接预处理出每个L和R对应的x和y就好了。
如果Sparse-Table的log也事先预处理了的话，总复杂度就可以达到 O(NlogN + Q)

---------- 线段树 ----------
TODO

==================== 性能分析 ====================
---------- RMQ ----------
看了不少同学的评测结果，都是1000+ ms。大致的范围是1000ms ~ 1250ms，少数程序则达到将近1500ms。
O(NlogN + QlogN)版和O(NlogN + Q)版只差了100ms左右，说明瓶颈在预处理。
我将O(NlogMaxN)次预处理改为O(NlogN)次预处理，用时几乎没差，说明已经差不多是极限了
但是预处理只有两重紧凑的循环，照理说应该很快的才对。理解不能。

---------- 线段树 ----------
看了一些同学的测试结果，都是400ms ~ 600ms。不知道为什么这么快。

==================== 杂项 ====================
最后一组数据后有一个零，而不是每组数据后有一个零。一开始看错题了，TAT

TODO 解释各种特判
